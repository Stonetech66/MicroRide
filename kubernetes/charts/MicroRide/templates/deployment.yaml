apiVersion: apps/v1
kind: Deployment
metadata:
  {{- if .Values.isConsumer }}
  name: "consumer-{{ .Values.appName }}"
  {{- else}}
  name: {{ .Values.appName }}
  {{- end}}
  labels:
    app: {{ .Values.appName }}
    type: {{ .Values.appType }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
      type: {{ .Values.appType }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
        type: {{ .Values.appType }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.appImage }}:{{ .Values.appVersion }}"
          command: ["sh",  "-c"]
          args: [{{.Values.appScript}}]
          ports:
            - containerPort: {{ .Values.containerPort }}
          {{- if  .Values.appProbe }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.containerPort }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.containerPort }}
          {{- end }}
          env:
          {{- range .Values.containerEnvVars }}
          - name: {{ .name }}
            value: {{ .value | quote  }}
          {{- end }}
          {{- if .Values.otherSecrets }}
          {{- range .Values.otherSecrets }}
          - name: {{ .name }}
            valueFrom:
              secretKeyRef:
                name: {{ .secretName }}
                key: {{ .secretKey }}
          {{- end }}
          {{- end }}
          {{- if .Values.appSecret }}
          envFrom:
          - secretRef:
              name: {{ .Values.appName }}
          {{- end}}


            


